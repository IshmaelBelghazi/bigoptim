#!/usr/bin/env Rscript
## -*- compile-command: "make test/custom" -*-
rm(list=ls())
## * Package setup
library(methods, quietly=TRUE)  ## hasArgs is not loaded by default by Rscript
library(devtools, quietly=TRUE)
library(ggplot2)
library(reshape2)
suppressMessages(library(glmnet))

grad_norm <- function(X, y, w, lambda) {
  norm(.bernoulli_grad(X, y, w, lambda), 'F')
}
family <- 1  ## 1 for Bernoulli

pkg_path <-"."
##try(unload(pkg_path))
##gctorture(on=TRUE)
document(pkg_path)
load_all(pkg_path)
##test(pkg_path)
## Loading Data set
data(covtype.libsvm)
## Normalizing Columns and adding intercept
X <- cbind(rep(1, NROW(covtype.libsvm$X)), scale(covtype.libsvm$X))[1:3000, ]
y <- covtype.libsvm$y[1:3000, , drop=FALSE]
y[y == 2] <- -1
n <- NROW(X)
p <- NCOL(X)
## Setting seed
set.seed(0)
## Setting up problem
maxIter <- n * 10  ## 10 passes throught the dataset
maxIters <- n * 1:10
lambda <- 1/n 
tols <- c(0.5, 0.1, 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001)
tols <- 0
nlambda <- 5
## Fitting grid with glmnet
glmnet_fits <- glmnet(X, as.factor(y), family="binomial", alpha=0,
                      nlambda=5, standardize=FALSE, intercept=FALSE)
## Getting lambdas grid
lambdas <- glmnet_fits$lambda
results <- list()
for( i in 1:lenght(lambdas)) {
  lambda_i <- rev(lambdas)[i]
  sag_fits_i <- lapply(maxIters, function(iter) sag_constant(X, y, lambda=lambda_i,
                                                             maxiter=iter,
                                                             family=family,
                                                             tol=0))
  sag_grad_norms_i <- sapply(sag_fits_i, function(sag_fit) grad_norm(X, y,
                                                                     w=sag_fit$w,
                                                                     lambda=lambda_i))
  glmnet_w_i <- as.numeric(coef(glmnet_fits, s=lambda_i))[-1]
  glmnet_norm_i <- grad_norm(X, y,
                             glmnet_w_i,
                             lambda_i)
  results_i <- data.frame(iterations=maxIters,
                          sag_grad_norms=sag_grad_norms_i,
                          glmnet_norm=rep(glmnet_norm_i, length(maxIters)))
  results[[paste0("lambda", lambda_i)]] <- results_i
}
df <- cbind(rep(results_i[, 1], 2), stack(results_i[, -1]))
names(df) <- c("iterations", "grad_norm", "fit")
p <- ggplot(data=df, aes(x=iterations, y=grad_norm, colour=fit)) + geom_line()
plot(p)
