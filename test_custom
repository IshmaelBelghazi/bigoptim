#!/usr/bin/env Rscript
## -*- compile-command: "make test/custom" -*-
##rm(list=ls())
## * Package setup
library(methods, quietly=TRUE)  ## hasArgs is not loaded by default by Rscript
library(devtools, quietly=TRUE)
pkg_path <-"."
##try(unload(pkg_path))
document(pkg_path)
load_all(pkg_path)
## * Generating data
## Sampling data
## Parameters



true_params <- 1:3
sample_size <- 10000
## Setting simulation experiments functionals
models <- list(
                 gaussian=.simulate_gaussian,
                 bernoulli=.simulate_bernoulli)
##               exponential=.simulate_exponential,
##               poisson=.simulate_poisson)

gradients <- list(gaussian=.gaussian_grad,
                  bernoulli=.bernoulli_grad,
                  exponential=.exponential_grad,
                  poisson=.poisson_grad)


family_id <- list(gaussian=0,
                  bernoulli=1,
                  exponential=2,
                  poisson=3)

simulations <- lapply(models, function(X) X(true_params=true_params,
                                            sample_size=sample_size,
                                            intercept=FALSE))
## fitting
glm_fit <- list()
## gaussian
##glm_fit$gaussian <- glm.fit(simulations$gaussian$X, simulations$gaussian$y, family=gaussian())
glm_fit$bernoulli <- glm.fit(simulations$bernoulli$X, (simulations$bernoulli$y + 1)/2, family=binomial())
##glm_fit$poisson <- glm.fit(simulations$poisson$X, simulations$poisson$y, family=poisson())
glm_fit_hat <- sapply(glm_fit, coef)
maxiter <- sample_size * 2000
tol <- 1e-8
## Fitting with glm
lambda <- 0 ##1/sample_size

## sag_fit_constant
sag_constant_fits <- list()
sag_ls_fits <- list()
##gctorture(on = TRUE)
for (sim in names(simulations)) {
    print(paste("fitting:", sim, "model"))
    print("SAG with constant step size fit")
    sag_constant_fits[[sim]] <- sag_constant(X=simulations[[sim]]$X,
                                           y=simulations[[sim]]$y,
                                           maxiter=maxiter,
                                           lambda=lambda,
                                           family=family_id[[sim]],
                                           tol=tol)
    print("SAG with lineseach fit")
    sag_ls_fits[[sim]] <- sag_constant(X=simulations[[sim]]$X,
                                     y=simulations[[sim]]$y,
                                     maxiter=maxiter,
                                     lambda=lambda,
                                     family=family_id[[sim]],
                                     tol=tol)
}

## Getting estimates
sag_constant_hat <- sapply(sag_constant_fits, function(X) X$w)
sag_constant_d <- sapply(sag_constant_fits, function(X) X$d)
sag_ls_hat <- sapply(sag_ls_fits, function(X) X$w)
sag_ls_d <- sapply(sag_ls_fits, function(X) X$d)
## Arraying parameters
print("CONSTANT SAG")
print("============")
print("Optimal weights")
print(sag_constant_hat) 
print("Approximate Gradient norm")
print(norm(sag_constant_d, "F"))
print("LINESEARCH SAG")
print("============")
print("Optimal weights")
print(sag_ls_hat)
print("Approximate Gradient norm")
print(norm(sag_ls_d, "F"))



## sag_fit_constant <- sag_constant(X=sim$gaussian$X,
##                                  y=sim$gaussian$y,
##                                  maxiter=maxiter,
##                                  lambda=lambda, family=0, tol=0.01)

## sag_fit_ls <- sag_ls(X=sim$X,
##                      y=sim$y,
##                      maxiter=maxiter,
##                      lambda=lambda, family=1, tol=0.01)

## print("True Parameters:")
## print(true_params)
## print("Estimated parameters glm:")
## print(coef(glm_fit))
## print("Estimated parameters (SAG constant):")
## print(sag_fit_constant$w)
## print("Approximate Gradient norm (SAG constant):")
## print(norm(sag_fit_constant$d, type="F"))
## print("Estimated parameters (SAG LineSearch):")
## print(sag_fit_ls$w)
## print("Approximate Gradient norm (SAG linesearch):")
## print(norm(sag_fit_ls$d, type="F"))
